<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>游戏引擎从零开发(一)</title>
      <link href="/XEngine/"/>
      <url>/XEngine/</url>
      
        <content type="html"><![CDATA[<p> 本系列记录了从零开始构造游戏引擎的过程，梳理整体知识点和框架。</p><p>主线参考为：</p><p>1、cherno的GameEngine系列：<a href="https://www.youtube.com/playlist?list=PLlrATfBNZ98dC-V-N3m0Go4deliWHPFwT">https://www.youtube.com/playlist?list=PLlrATfBNZ98dC-V-N3m0Go4deliWHPFwT</a></p><p>2、游戏引擎架构第二版</p><p>3、Games104：现代游戏引擎</p><p> 本系列开端以cherno的教程切入，因为该系列以code live的形式从头开始带着去讲解游戏引擎的内部程序架构，更重要的是在工程细节上有许多可以学习的地方，游戏引擎本质上作为一个大型的软件工程，工程上的细节处理我认为可能比大概的理论框架还要重要。在整体框架的扩展以及实验性功能，会参考另外两个资料。</p><p> 另外笔者自身已经前置学习了DX12，希望可以借此机会，完成整体的渲染API的封装，过渡学习Vulkan(现代API互转我认为成本还可以)，并且希望进一步接触到传统API与现代API差异性封装。</p><p>并且可以以此搭建自己的图形实验平台，可以让自己方便的去复现一些图形算法。</p><h1 id="引擎的框架和定义"><a href="#引擎的框架和定义" class="headerlink" title="引擎的框架和定义"></a>引擎的框架和定义</h1><p>本文不会具体记录详细的代码过程，但会给出关键性的工程细节以及整体框架梳理和自身思考。</p><h2 id="游戏引擎的定义"><a href="#游戏引擎的定义" class="headerlink" title="游戏引擎的定义"></a>游戏引擎的定义</h2><p>这里我认为Cherno的一句话很精髓，大致意思为：</p><blockquote><p>游戏引擎的核心就是，从硬盘读取数据，将这段数据通过处理，最后以另一种数据的形式展示出来(可能是视觉上渲染效果，物理效果或者音效等等)</p></blockquote><p>所以游戏引擎天然就是<strong>面向数据</strong>的，这很重要；Entity Component System是一种面向数据的设计，游戏引擎中通常会使用该架构去为了更好的实现对象设计和内存管理。</p><p>从使用意义上来讲，游戏引擎也可以理解为是<strong>3D应用程序</strong>的<em>核心组件</em>或者<em>开发平台</em>。</p><h2 id="设计游戏引擎的程序框架"><a href="#设计游戏引擎的程序框架" class="headerlink" title="设计游戏引擎的程序框架"></a>设计游戏引擎的程序框架</h2><p>cherno的教程构建了一个引擎最基础的框架，但在这里我还是想和游戏引擎架构中给出的运行时架构和GAMES104中的架构做对比。</p><p>运行时架构：</p><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefined%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9E%B6%E6%9E%84.png" alt="运行时架构" style="zoom: 50%;" /><p>GAMES104：</p><ul><li>工具层（Tool Layer）</li></ul><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefinedimage-20230628170550578.png" alt="image-20230628170550578" style="zoom:50%;" /><ul><li>功能层（Function Layer）</li></ul><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefinedimage-20230628170605994.png" alt="image-20230628170605994" style="zoom:50%;" /><ul><li>资源层（Resource Layer）</li></ul><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefinedimage-20230628170627277.png" alt="image-20230628170627277" style="zoom:50%;" /><ul><li>核心层（Core Layer）</li></ul><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefinedimage-20230628170646904.png" alt="image-20230628170646904" style="zoom:50%;" /><ul><li>平台层（Platform Layer）</li></ul><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefinedimage-20230628170714390.png" alt="image-20230628170714390" style="zoom:50%;" /><p>Cherno：</p><ul><li>Entyr Point（入口点）</li><li>Application Layer（应用层）</li><li>Window Layer（窗口层）</li><li>RenderAPI Abstract（图形API抽象层）</li><li>Debugging System（调试系统）</li><li>Script Layer（脚本层）</li><li>Memory System（内存管理系统）</li><li>Entity-Component System（实例-组件系统）</li><li>Physics（物理系统）</li><li>File IO&amp;VFS（文件读写&amp;虚拟文件）</li><li>Build System（资产构建系统）</li></ul><p>可以看出不同于书本和GAMES104的提出的整体框架，cherno给出的只是自己沿着写代码的思路给出的程序基本架构，所以在认识游戏引擎整体架构时，还是需要参考前两者，而cherno的架构只是程序实现的思路框架。</p><h1 id="开始搭建基础结构"><a href="#开始搭建基础结构" class="headerlink" title="开始搭建基础结构"></a>开始搭建基础结构</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>整体项目分为两个子项目，一个为引擎本身，还有一个是调用引擎的App。这是由于引擎本身需要大量的依赖，所以将引擎整体作为一个项目，将生成好的依赖文件，供App使用。这样可以完成引擎架构和做游戏的应用与大量第三方库完成解耦，这里本文中的引擎项目起名XEngine，App项目起名DemoApp。</p><p>这里给出Cherno的工程上的设计细节：</p><p>他首先在Core.h文件中做了一个预编译宏处理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> XENGINE_PLATFORM_WINDOWS</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> XENGINE_BUILD_DLL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XENGINE_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XENGINE_API __declspec(dllimport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> XEngine only supports Windows now!</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>并且在每一个在App项目中调用的类的声明前，添加了XENGINE_API：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">XENGINE_API</span> classname &#123;</span><br><span class="line">    <span class="comment">// 类的声明</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>__declspec(dllexport)：表示编译后的dll允许该函数被外部调用</p><p>__declspec(dllimport)：表示该函数的定义来源于外部dll</p><p>这样可以显示声明和区别同一个头文件在引擎项目中和App项目中引用中，一个类导出&#x2F;导入的不同意义。</p><p>其次，在引擎内部也定义一个应用类，来抽象和定义App项目中具体的App：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> XEngine &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XENGINE_API</span> Application</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Application</span>();</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Application</span>();</span><br><span class="line"><span class="function"><span class="type">static</span> Application&amp; <span class="title">Get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *s_Instance; &#125;</span><br><span class="line"><span class="function">Window&amp; <span class="title">GetWindow</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *m_Window; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnEvent</span><span class="params">(Event&amp; e)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PushLayer</span><span class="params">(Layer* layer)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PushOverlay</span><span class="params">(Layer* overlay)</span></span>;</span><br><span class="line"><span class="function">ImGuiLayer* <span class="title">GetImGuiLayer</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_ImGuiLayer; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Close</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">OnWindowClose</span><span class="params">(WindowCloseEvent&amp; e)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">OnWindowResize</span><span class="params">(WindowResizeEvent&amp; e)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Scope&lt;Window&gt; m_Window;</span><br><span class="line">ImGuiLayer* m_ImGuiLayer;</span><br><span class="line"><span class="type">bool</span> m_Running = <span class="literal">true</span>;</span><br><span class="line">LayerStack m_LayerStack;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> Application* s_Instance;</span><br><span class="line"><span class="keyword">friend</span> <span class="type">int</span> ::<span class="built_in">main</span>(<span class="type">int</span> argc, <span class="type">char</span>** argv);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// To be defined in Client</span></span><br><span class="line"><span class="function">Application* <span class="title">CreateApplication</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Entry-Point"><a href="#Entry-Point" class="headerlink" title="Entry Point"></a>Entry Point</h2><p>引擎的入口点，定义引擎初始化时需要做的工作，这里给出设计细节。</p><p>首先以头文件的形式创建EntryPoint.h</p><p><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefinedimage-20230628160706429.png" alt="image-20230628160706429"></p><p>并且在该头文件中定义main函数。</p><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefinedimage-20230628160805379.png" alt="image-20230628160805379" style="zoom: 67%;" /><p>这样在使用该引擎的App应用程序代码中，就可以直接包含该头文件，进而将<strong>EntryPoint的设计与使用分开</strong>：设计在引擎内部的Core中，使用在App中。</p><p>虽然App类的定义和CreateApplication()的调用都在引擎内部，但是cherno将CreateApplication()的定义放在了App项目中，这样可以让使用引擎者在应用程序的初始化阶段自定义。（区别于引擎内部的自定义）</p><h2 id="Logging-System"><a href="#Logging-System" class="headerlink" title="Logging System"></a>Logging System</h2><p>这里cherno使用的第三方库spdlog，git地址：<a href="https://github.com/gabime/spdlog">https://github.com/gabime/spdlog</a></p><p>为了让引擎使用起来更加统一，调用的时候不用额外再使用spdlog::，所以这里建立了一个自己的Log类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> XEngine &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XENGINE_API</span> Log</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">static</span> Ref&lt;spdlog::logger&gt;&amp; <span class="title">GetCoreLogger</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> s_CoreLogger; &#125;</span><br><span class="line"><span class="function"><span class="type">static</span> Ref&lt;spdlog::logger&gt;&amp; <span class="title">GetClientLogger</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> s_ClientLogger; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// logger for CoreEngine</span></span><br><span class="line"><span class="type">static</span> Ref&lt;spdlog::logger&gt; s_CoreLogger;</span><br><span class="line"><span class="comment">// logger for Client</span></span><br><span class="line"><span class="type">static</span> Ref&lt;spdlog::logger&gt; s_ClientLogger;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Log类中包含了一个引擎的，一个App的，总之Log类的目的就是为了引擎使用Log系统时，可以隐去spdlog的印记，使得程序更加统一。</p><h2 id="Event-System"><a href="#Event-System" class="headerlink" title="Event System"></a>Event System</h2><p>不同平台之间，不同的图形API实现，都会有着不一样的事件触发函数。为了能够将这些抽象起来，统一交由引擎处理，这里建立了一个Event System。</p><p>首先这里建立了事件发生的类型和事件的整体的分类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum class</span> <span class="title class_">EventType</span></span><br><span class="line">&#123;</span><br><span class="line">None = <span class="number">0</span>,</span><br><span class="line">WindowClose,</span><br><span class="line">WindowResize,</span><br><span class="line">WindowFocus,</span><br><span class="line">WindowLostFocus,</span><br><span class="line">WindowMoved,</span><br><span class="line">AppTick,</span><br><span class="line">AppUpdate,</span><br><span class="line">AppRender,</span><br><span class="line">KeyPressed,</span><br><span class="line">KeyReleased,</span><br><span class="line">KeyTyped,</span><br><span class="line">MouseButtonPressed,</span><br><span class="line">MouseButtonReleased,</span><br><span class="line">MouseMoved,</span><br><span class="line">MouseScrolled</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">EventCategory</span></span><br><span class="line">&#123;</span><br><span class="line">None = <span class="number">0</span>,</span><br><span class="line">EventCategoryApplication  = <span class="built_in">BIT</span>(<span class="number">0</span>),</span><br><span class="line">EventCategoryInput        = <span class="built_in">BIT</span>(<span class="number">1</span>),</span><br><span class="line">EventCategoryKeyboard     = <span class="built_in">BIT</span>(<span class="number">2</span>),</span><br><span class="line">EventCategoryMouse        = <span class="built_in">BIT</span>(<span class="number">3</span>),</span><br><span class="line">EventCategoryMouseButton  = <span class="built_in">BIT</span>(<span class="number">4</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里不难看出EventCategory和EventType语义上比较重叠，仅仅是EventType比EventCategory更加细化。这里这样做的目的是为了<em>方便在程序运行逻辑上做出判断</em>。比如一个同样都是键盘按键的分类(Category)，不同的类型(Type)按下和释放，都需要对应精确的不同的事件响应，所以这时候用Type判断。但是都作为键盘事件分类，在某一些条件判断可以一概而论，所以这时候可以用Category判断。</p><p>其次，定义了Event抽象类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">XENGINE_API</span> Event</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Event</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="type">bool</span> Handled = <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> EventType <span class="title">GetEventType</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">const</span> <span class="type">char</span>* <span class="title">GetName</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">GetCategoryFlags</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">ToString</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">GetName</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">IsInCategory</span><span class="params">(EventCategory category)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">GetCategoryFlags</span>() &amp; category;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着定义了一个Event的调度器：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventDispatcher</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">EventDispatcher</span>(Event&amp; event)</span><br><span class="line">        :<span class="built_in">m_Event</span>(event) &#123;&#125;</span><br><span class="line">    <span class="comment">// F will be deduced by the compiler</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> F&gt;</span></span><br><span class="line"><span class="function">    <span class="type">bool</span> <span class="title">Dispatch</span><span class="params">(<span class="type">const</span> F&amp; func)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_Event.<span class="built_in">GetEventType</span>() == T::<span class="built_in">GetStaticType</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            m_Event.Handled |= <span class="built_in">func</span>(<span class="built_in">static_cast</span>&lt;T&amp;&gt;(m_Event));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Event&amp; m_Event;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里又是一个值得学习的C++泛型使用的工程细节，这里首先给出Dispatch实际调用的实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> XENGINE_BIND_EVENT_FN(fn) [this](auto&amp;&amp;... args) -&gt; decltype(auto) &#123; return this-&gt;fn(std::forward<span class="string">&lt;decltype(args)&gt;</span>(args)...); &#125;</span></span><br><span class="line"><span class="function">EventDispatcher <span class="title">dispatcher</span><span class="params">(e)</span></span>;</span><br><span class="line">dispatcher.<span class="built_in">Dispatch</span>&lt;WindowCloseEvent&gt;(<span class="built_in">XENGINE_BIND_EVENT_FN</span>(Application::OnWindowClose));</span><br></pre></td></tr></table></figure><p>首先宏定义了一个lambda表达式，[this]表示函数体内的可以使用Lambda所在类中的成员变量，auto&amp;&amp;可以接收任何的初始值设定，无论是左值还是右值，decltype(auto)表示取得表达式结果结果类型精确类型，std::forward&lt;decltype(args)&gt;(args)可以按照args参数的类型完美转发args作为fn函数的参数。整体用来显示提供了Dispatch中F的类型。</p><p>最终效果就是将Application::OnWindowClose函数传入Dispatch函数中，并且将dispatcher中的m_Event，即dispatcher创建时的e作为参数传递给Application::OnWindowClose函数。</p><p>中间还使用了m_Event.GetEventType() &#x3D;&#x3D; T::GetStaticType()，用于判断当前发生事件与函数内部实际事件是否一致，若一致执行传递进来的lambda表达式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Application::OnEvent</span><span class="params">(Event&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">EventDispatcher <span class="title">dispatcher</span><span class="params">(e)</span></span>;</span><br><span class="line">    dispatcher.<span class="built_in">Dispatch</span>&lt;WindowCloseEvent&gt;(<span class="built_in">XENGINE_BIND_EVENT_FN</span>(Application::OnWindowClose));</span><br><span class="line">    dispatcher.<span class="built_in">Dispatch</span>&lt;WindowResizeEvent&gt;(<span class="built_in">XENGINE_BIND_EVENT_FN</span>(Application::OnWindowResize));</span><br><span class="line">    <span class="built_in">XENGINE_CORE_TRACE</span>(<span class="string">&quot;&#123;0&#125;&quot;</span>, e);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = m_LayerStack.<span class="built_in">rbegin</span>(); it != m_LayerStack.<span class="built_in">rend</span>(); ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.Handled)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        (*it)-&gt;<span class="built_in">OnEvent</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将OnEvent的函数利用std::function包装绑定到了EventCallback上，而当每次不同驱动API实际的回调函数发生时，例如下面：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glfwSetWindowCloseCallback</span>(m_Window, [](GLFWwindow* window)</span><br><span class="line">&#123;</span><br><span class="line">    WindowData&amp; data = *(WindowData*)<span class="built_in">glfwGetWindowUserPointer</span>(window);</span><br><span class="line">    WindowCloseEvent event;</span><br><span class="line">    data.<span class="built_in">EventCallback</span>(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样将当前事件的传入OnEvent函数中，并通过任务调度器去判断，并下放到各个层(下一节的概念)中</p><h2 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h2><p>对于一个事件的响应，我们需要一个层级的概念去分层响应它，针对渲染，编辑界面、命令等事件，设定给每个层一个抽象独立的概念。</p><p>首先定义了Layer类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> XEngine &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XENGINE_API</span> Layer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Layer</span>(<span class="type">const</span> std::string&amp; name = <span class="string">&quot;Layer&quot;</span>);</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Layer</span>();</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnAttach</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnDetach</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnUpdate</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnImGuiRender</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnEvent</span><span class="params">(Event&amp; event)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> std::string&amp; <span class="title">GetName</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_DebugName; &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">std::string m_DebugName;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次定义了一个LayerStack类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> XEngine &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XENGINE_API</span> LayerStack</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">LayerStack</span>() = <span class="keyword">default</span>;</span><br><span class="line">~<span class="built_in">LayerStack</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PushLayer</span><span class="params">(Layer* layer)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PushOverlay</span><span class="params">(Layer* overlay)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PopLayer</span><span class="params">(Layer* layer)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PopOverlay</span><span class="params">(Layer* overlay)</span></span>;</span><br><span class="line">std::vector&lt;Layer*&gt;::<span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_Layers.<span class="built_in">begin</span>(); &#125;</span><br><span class="line">std::vector&lt;Layer*&gt;::<span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_Layers.<span class="built_in">end</span>(); &#125;</span><br><span class="line">std::vector&lt;Layer*&gt;::<span class="function">reverse_iterator <span class="title">rbegin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_Layers.<span class="built_in">rbegin</span>(); &#125;</span><br><span class="line">std::vector&lt;Layer*&gt;::<span class="function">reverse_iterator <span class="title">rend</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_Layers.<span class="built_in">rend</span>(); &#125;</span><br><span class="line">std::vector&lt;Layer*&gt;::<span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_Layers.<span class="built_in">begin</span>(); &#125;</span><br><span class="line">std::vector&lt;Layer*&gt;::<span class="function">const_iterator <span class="title">end</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_Layers.<span class="built_in">end</span>(); &#125;</span><br><span class="line">std::vector&lt;Layer*&gt;::<span class="function">const_reverse_iterator <span class="title">rbegin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_Layers.<span class="built_in">rbegin</span>(); &#125;</span><br><span class="line">std::vector&lt;Layer*&gt;::<span class="function">const_reverse_iterator <span class="title">rend</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_Layers.<span class="built_in">rend</span>(); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// real dataStruct is not stack, because it need iterate on update</span></span><br><span class="line"><span class="comment">// we need contiguous data storage</span></span><br><span class="line"><span class="comment">// Render Order--&gt;                  &lt;--Event Order</span></span><br><span class="line"><span class="comment">// (begin,               ...                  ,end)</span></span><br><span class="line">std::vector&lt;Layer*&gt; m_Layers;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> m_LayerInsertIndex = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以定义LayerStack，是因为一个事件命令传入给各个层，应该是按照顺序依次进行的，同时渲染的顺序也应该按照层级一步步进行，而与此同时命令的响应顺序和渲染的顺序应该是相反的，比如事件先经过UI层响应，在传递给游戏功能层，而渲染则是先渲染游戏场景，再渲染UI。</p><p>这里cherno的LayerStack内部维护的数据结构实际上是一个vector，之所以这样做是因为，Layer使用起来像是一个栈的结构，但是实际过程需要来回的迭代并更新，vector实现起来更方便一些。</p><p>而Layer的具体实例在上面Application::OnEvent有所展示，一个事件会依次迭代各个层，并响应事件。</p><h2 id="ImGui"><a href="#ImGui" class="headerlink" title="ImGui"></a>ImGui</h2><p>这一节主要是引入了ImGui作为整体引擎的ui界面，这里结合Layer系统讲。</p><p>首先按照Layer的概念创建了ImGuiLayer：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> XEngine &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XENGINE_API</span> ImGuiLayer : <span class="keyword">public</span> Layer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ImGuiLayer</span>();</span><br><span class="line">~<span class="built_in">ImGuiLayer</span>();</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnAttach</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnDetach</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnImGuiRender</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Begin</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">End</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetDarkThemeColors</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">GetActiveWidgetID</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">bool</span> m_BlockEvents = <span class="literal">true</span>;</span><br><span class="line"><span class="type">float</span> m_Time = <span class="number">0.0f</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在Application创建之初将ImGuiLayer放入LayerStack的尾端，即渲染的最后一层，事件响应的第一层。</p><p>而这里值得注意的是Layer类中就已经定义了void OnImGuiRender()的接口，这个是因为所有层，如果有渲染功能的需要的话，我们还是希望作为ImGui的窗口的一部分中去渲染，这样在引擎中方便UI布局，整个界面看起来更加整齐划一，而作为事件响应ImGui还是充当UI按钮的位置，作为事件响应的第一层。</p><p>对于事件的响应从Application::OnEvent的代码实现中可以看出，总是从LayerStack的末尾去开始迭代，所以总是ImGui去第一个响应事件</p><p>对于渲染顺序来说，在主体循环可以看到：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (m_Running)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//以上省略</span></span><br><span class="line">    m_ImGuiLayer-&gt;<span class="built_in">Begin</span>();</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (Layer* layer : m_LayerStack)</span><br><span class="line">            layer-&gt;<span class="built_in">OnImGuiRender</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    m_ImGuiLayer-&gt;<span class="built_in">End</span>();</span><br><span class="line"><span class="comment">//以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染顺序从LayerStack的开端开始迭代，最后渲染ImGuiLayer。</p><p>这里给出Begin()和End()的具体实现，类似ImGui的固定用法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ImGuiLayer::Begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ImGui_ImplOpenGL3_NewFrame</span>();</span><br><span class="line">    <span class="built_in">ImGui_ImplGlfw_NewFrame</span>();</span><br><span class="line">    ImGui::<span class="built_in">NewFrame</span>();</span><br><span class="line">    <span class="comment">//ImGuizmo::BeginFrame();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ImGuiLayer::End</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ImGuiIO&amp; io = ImGui::<span class="built_in">GetIO</span>();</span><br><span class="line">    Application&amp; app = Application::<span class="built_in">Get</span>();</span><br><span class="line">    io.DisplaySize = <span class="built_in">ImVec2</span>((<span class="type">float</span>)app.<span class="built_in">GetWindow</span>().<span class="built_in">GetWidth</span>(), (<span class="type">float</span>)app.<span class="built_in">GetWindow</span>().<span class="built_in">GetHeight</span>());</span><br><span class="line">    <span class="comment">// Rendering</span></span><br><span class="line">    ImGui::<span class="built_in">Render</span>();</span><br><span class="line">    <span class="built_in">ImGui_ImplOpenGL3_RenderDrawData</span>(ImGui::<span class="built_in">GetDrawData</span>());</span><br><span class="line">    <span class="keyword">if</span> (io.ConfigFlags &amp; ImGuiConfigFlags_ViewportsEnable)</span><br><span class="line">    &#123;</span><br><span class="line">        GLFWwindow* backup_current_context = <span class="built_in">glfwGetCurrentContext</span>();</span><br><span class="line">        ImGui::<span class="built_in">UpdatePlatformWindows</span>();</span><br><span class="line">        ImGui::<span class="built_in">RenderPlatformWindowsDefault</span>();</span><br><span class="line">        <span class="built_in">glfwMakeContextCurrent</span>(backup_current_context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>这里只梳理整体引擎的基本概念和基础框架的程序构建，其中少了渲染和窗口的部分，这一部分我想作为之后跨平台和渲染抽象的部分一起总结。其次对于基础框架的梳理，我只整理了我自认为是骨干的部分，许多细节并没有展示出来，我认为这些细节是作为骨干部分的衍生和补充，而紧紧握住骨干，才能让自己对于整个庞大的系统更加的清晰和掌握。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 游戏引擎 </tag>
            
            <tag> 图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ImGui笔记</title>
      <link href="/ImGui/"/>
      <url>/ImGui/</url>
      
        <content type="html"><![CDATA[<p>​无论是写自己的渲染器、C++项目亦或是看别人的开源项目，都能看到ImGui的身影，学习ImGui最好方法无疑是直接看源码，所以本文章只是简单介绍并梳理ImGui整个框架，方便自己查询。</p><h1 id="什么是ImGui"><a href="#什么是ImGui" class="headerlink" title="什么是ImGui"></a>什么是ImGui</h1><p>​ImGui，(Immediate Mode GUI)的缩写，即为立即模式的GUI，是一种实时渲染的GUI工具。底层以C++和图形API构建，不同的平台会依据具体的图形API来渲染，不依赖于OS，简单、跨平台，相比于其他GUI比较吃显卡资源一些，所以比较难用在To C的实际产品中，而又因为每帧重新渲染，整个项目全局的任何变量都可以动态调整，所以一般用于开发人员自己的调试，开源项目的展示demo，或者内部游戏引擎的界面（早年的Unity与UE也用过ImGui做主编辑器界面）。</p><h1 id="开始ImGui"><a href="#开始ImGui" class="headerlink" title="开始ImGui"></a>开始ImGui</h1><p>ImGui是一个轻量级、跨平台、无其他依赖的库；使用它时，只需将源码直接复制到自己的项目中，或者生成dll，让自己的项目去link它。</p><p>ImGui源码地址(Dera ImGui)：<a href="https://github.com/ocornut/imgui.git">https://github.com/ocornut/imgui.git</a></p><p>ImGui头文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;imgui.h&gt;</span> <span class="comment">// 基本头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;examples/imgui_impl_glfw.h&gt;</span> <span class="comment">// 窗口的具体实现</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;examples/imgui_impl_opengl3.h&gt;</span> <span class="comment">// 图形API的具体实现</span></span></span><br></pre></td></tr></table></figure><p>可以看到除了基本的头文件定义以外，在examples有两个文件用来定义具体的平台实现。ImGui底层逻辑跟用OpenGL、DX渲染出来的东西一样，所以使用ImGui时，就需要像使用图形API那样考虑两个东西，一个是窗口的实现，一个是具体API的驱动。</p><p> 以上述代码为例，glfw一般用来OpenGL和Vulkan的窗口实现，opengl则是具体的驱动。若是使用DirectX，那就需要下面这样，Win32做窗口，DX做具体驱动：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;imgui.h&gt;</span> <span class="comment">// 基本头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;examples/imgui_impl_win32.h&gt;</span> <span class="comment">// 窗口的具体实现</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;examples/imgui_impl_dx12.h&gt;</span> <span class="comment">// 图形API的具体实现</span></span></span><br></pre></td></tr></table></figure><h1 id="ImGui使用"><a href="#ImGui使用" class="headerlink" title="ImGui使用"></a>ImGui使用</h1><p>ImGui使用时的框架，我自己抽象成了四个部分：(代码展示皆以glfw+opengl为例)</p><ul><li>初始化(平台无关)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">IMGUI_CHECKVERSION</span>();<span class="comment">// 版本检查</span></span><br><span class="line">ImGui::<span class="built_in">CreateContext</span>();<span class="comment">// 初始化上下文</span></span><br><span class="line">ImGuiIO&amp; io = ImGui::<span class="built_in">GetIO</span>();<span class="comment">// 设置IO口</span></span><br><span class="line">(<span class="type">void</span>)io;<span class="comment">// 官方示例的做法，可以抑制“unused variable”的警告</span></span><br><span class="line"><span class="comment">// 设置IO config</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">ImGui::<span class="built_in">StyleColorsDark</span>();<span class="comment">// 设置颜色风格</span></span><br></pre></td></tr></table></figure><ul><li>初始化(平台相关)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ImGui_ImplGlfw_InitForOpenGL</span>(window, <span class="literal">true</span>);<span class="comment">// 初始化窗口</span></span><br><span class="line"><span class="built_in">ImGui_ImplOpenGL3_Init</span>(<span class="string">&quot;#version 410&quot;</span>);<span class="comment">// 初始化驱动</span></span><br></pre></td></tr></table></figure><ul><li>循环主体</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">//--------begin--------------</span></span><br><span class="line">    <span class="built_in">ImGui_ImplOpenGL3_NewFrame</span>();</span><br><span class="line">    <span class="built_in">ImGui_ImplGlfw_NewFrame</span>();</span><br><span class="line">    ImGui::<span class="built_in">NewFrame</span>();</span><br><span class="line">    <span class="comment">//---------------------------</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//-----自定义ImGui事件--------</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//---------------------------</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//-----------end-------------</span></span><br><span class="line">    <span class="comment">// 为了ReSize更新显示大小和视口</span></span><br><span class="line">    ImGuiIO&amp; io = ImGui::<span class="built_in">GetIO</span>();</span><br><span class="line">    io.DisplaySize = <span class="built_in">ImVec2</span>(width, height);</span><br><span class="line">    <span class="keyword">if</span> (io.ConfigFlags &amp; ImGuiConfigFlags_ViewportsEnable) &#123;</span><br><span class="line">        GLFWwindow* backup_current_context = <span class="built_in">glfwGetCurrentContext</span>();</span><br><span class="line">        ImGui::<span class="built_in">UpdatePlatformWindows</span>();</span><br><span class="line">        ImGui::<span class="built_in">RenderPlatformWindowsDefault</span>();</span><br><span class="line">        <span class="built_in">glfwMakeContextCurrent</span>(backup_current_context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Rendering</span></span><br><span class="line">    ImGui::<span class="built_in">Render</span>();</span><br><span class="line">    <span class="built_in">ImGui_ImplOpenGL3_RenderDrawData</span>(ImGui::<span class="built_in">GetDrawData</span>());</span><br><span class="line">    <span class="comment">//---------------------------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看到循环主体内又可以分为三个部分，begin、自定义、end。begin模块包含了每帧开始时，ImGui对于自己窗口和驱动的更新；end模块包含了实际最终的rendering，特别注意在写渲染&#x2F;游戏引擎相关项目时，end中的渲染工作一定要放到最后，因为他本质上也是API的DrawCall(官方解释：<em>a small list of draw calls batches</em>)，对于UI我们总是希望，它是整个窗口的最上层，所以要放到最后渲染(如果放到自定义的渲染之前，好像ImGui内部实现也会报错提醒开发人员)；而自定义事件，一般则是开发人员动态绑定按钮和变量的地方，这里举一个官方的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ImGui::<span class="built_in">Text</span>(<span class="string">&quot;Hello, world %d&quot;</span>, <span class="number">123</span>);</span><br><span class="line"><span class="keyword">if</span> (ImGui::<span class="built_in">Button</span>(<span class="string">&quot;Save&quot;</span>))</span><br><span class="line">    <span class="built_in">MySaveFunction</span>();</span><br><span class="line">ImGui::<span class="built_in">InputText</span>(<span class="string">&quot;string&quot;</span>, buf, <span class="built_in">IM_ARRAYSIZE</span>(buf));</span><br><span class="line">ImGui::<span class="built_in">SliderFloat</span>(<span class="string">&quot;float&quot;</span>, &amp;f, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br></pre></td></tr></table></figure><p><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefined191050833-b7ecf528-bfae-4a9f-ac1b-f3d83437a2f4.png" alt="示例"></p><p>这里可以看到float f变量和string buf变量都被绑定到ImGui的事件中，这使得我们可以在运行时，动态调整这些变量。</p><ul><li>结束</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ImGui_ImplOpenGL3_Shutdown</span>();</span><br><span class="line"><span class="built_in">ImGui_ImplGlfw_Shutdown</span>();</span><br><span class="line">ImGui::<span class="built_in">DestroyContext</span>();</span><br></pre></td></tr></table></figure><h1 id="ImGui-UI概念"><a href="#ImGui-UI概念" class="headerlink" title="ImGui UI概念"></a>ImGui UI概念</h1><ul><li>window(应用内窗口)</li></ul><p>ImGui首先有一个window的概念，并且一个应用(即一个项目)可以包含多个窗口，所以也被称为应用内窗口，窗口时各种控件的载体，而且ImGui已经添加了docking的功能，使得我们可以达到如下结果：</p><p><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefined46304087-00035580-c5ae-11e8-8904-f27a9434574a.gif" alt="20180809_docking"></p><p><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefined97541627-c0dea300-19c5-11eb-9416-8bb255e189a1.png" alt="Docking"></p><ul><li>控件</li></ul><p>可以在window上创建互动类控件，比如按钮、滑动条等等，并且可以将若干控件设置成group，可以完成整齐的布局。</p><ul><li>画布</li></ul><p>可以在window上绘制自定义的形状，也可以绘制图片。（引擎中可以展示相关贴图等，做材质系统）</p><p>这里对于概念只是简单的梳理和介绍，详细可以查询ImGui的wiki：<a href="https://github.com/ocornut/imgui/wiki">https://github.com/ocornut/imgui/wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UI库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
