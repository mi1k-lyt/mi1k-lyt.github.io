<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ImGui笔记</title>
      <link href="/ImGui/"/>
      <url>/ImGui/</url>
      
        <content type="html"><![CDATA[<p>​无论是写自己的渲染器、C++项目亦或是看别人的开源项目，都能看到ImGui的身影，学习ImGui最好方法无疑是直接看源码，所以本文章只是简单介绍并梳理ImGui整个框架，方便自己查询。</p><h1 id="什么是ImGui"><a href="#什么是ImGui" class="headerlink" title="什么是ImGui"></a>什么是ImGui</h1><p>​ImGui，(Immediate Mode GUI)的缩写，即为立即模式的GUI，是一种实时渲染的GUI工具。底层以C++和图形API构建，不同的平台会依据具体的图形API来渲染，不依赖于OS，简单、跨平台，相比于其他GUI比较吃显卡资源一些，所以比较难用在To C的实际产品中，而又因为每帧重新渲染，整个项目全局的任何变量都可以动态调整，所以一般用于开发人员自己的调试，开源项目的展示demo，或者内部游戏引擎的界面（早年的Unity与UE也用过ImGui做主编辑器界面）。</p><h1 id="开始ImGui"><a href="#开始ImGui" class="headerlink" title="开始ImGui"></a>开始ImGui</h1><p>ImGui是一个轻量级、跨平台、无其他依赖的库；使用它时，只需将源码直接复制到自己的项目中，或者生成dll，让自己的项目去link它。</p><p>ImGui源码地址(Dera ImGui)：<a href="https://github.com/ocornut/imgui.git">https://github.com/ocornut/imgui.git</a></p><p>ImGui头文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;imgui.h&gt;</span> <span class="comment">// 基本头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;examples/imgui_impl_glfw.h&gt;</span> <span class="comment">// 窗口的具体实现</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;examples/imgui_impl_opengl3.h&gt;</span> <span class="comment">// 图形API的具体实现</span></span></span><br></pre></td></tr></table></figure><p>可以看到除了基本的头文件定义以外，在examples有两个文件用来定义具体的平台实现。ImGui底层逻辑跟用OpenGL、DX渲染出来的东西一样，所以使用ImGui时，就需要像使用图形API那样考虑两个东西，一个是窗口的实现，一个是具体API的驱动。</p><p> 以上述代码为例，glfw一般用来OpenGL和Vulkan的窗口实现，opengl则是具体的驱动。若是使用DirectX，那就需要下面这样，Win32做窗口，DX做具体驱动：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;imgui.h&gt;</span> <span class="comment">// 基本头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;examples/imgui_impl_win32.h&gt;</span> <span class="comment">// 窗口的具体实现</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;examples/imgui_impl_dx12.h&gt;</span> <span class="comment">// 图形API的具体实现</span></span></span><br></pre></td></tr></table></figure><h1 id="ImGui使用"><a href="#ImGui使用" class="headerlink" title="ImGui使用"></a>ImGui使用</h1><p>ImGui使用时的框架，我自己抽象成了四个部分：(代码展示皆以glfw+opengl为例)</p><ul><li>初始化(平台无关)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">IMGUI_CHECKVERSION</span>();<span class="comment">// 版本检查</span></span><br><span class="line">ImGui::<span class="built_in">CreateContext</span>();<span class="comment">// 初始化上下文</span></span><br><span class="line">ImGuiIO&amp; io = ImGui::<span class="built_in">GetIO</span>();<span class="comment">// 设置IO口</span></span><br><span class="line">(<span class="type">void</span>)io;<span class="comment">// 官方示例的做法，可以抑制“unused variable”的警告</span></span><br><span class="line"><span class="comment">// 设置IO config</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">ImGui::<span class="built_in">StyleColorsDark</span>();<span class="comment">// 设置颜色风格</span></span><br></pre></td></tr></table></figure><ul><li>初始化(平台相关)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ImGui_ImplGlfw_InitForOpenGL</span>(window, <span class="literal">true</span>);<span class="comment">// 初始化窗口</span></span><br><span class="line"><span class="built_in">ImGui_ImplOpenGL3_Init</span>(<span class="string">&quot;#version 410&quot;</span>);<span class="comment">// 初始化驱动</span></span><br></pre></td></tr></table></figure><ul><li>循环主体</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">//--------begin--------------</span></span><br><span class="line">    <span class="built_in">ImGui_ImplOpenGL3_NewFrame</span>();</span><br><span class="line">    <span class="built_in">ImGui_ImplGlfw_NewFrame</span>();</span><br><span class="line">    ImGui::<span class="built_in">NewFrame</span>();</span><br><span class="line">    <span class="comment">//---------------------------</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//-----自定义ImGui事件--------</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//---------------------------</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//-----------end-------------</span></span><br><span class="line">    <span class="comment">// 为了ReSize更新显示大小和视口</span></span><br><span class="line">    ImGuiIO&amp; io = ImGui::<span class="built_in">GetIO</span>();</span><br><span class="line">    io.DisplaySize = <span class="built_in">ImVec2</span>(width, height);</span><br><span class="line">    <span class="keyword">if</span> (io.ConfigFlags &amp; ImGuiConfigFlags_ViewportsEnable) &#123;</span><br><span class="line">        GLFWwindow* backup_current_context = <span class="built_in">glfwGetCurrentContext</span>();</span><br><span class="line">        ImGui::<span class="built_in">UpdatePlatformWindows</span>();</span><br><span class="line">        ImGui::<span class="built_in">RenderPlatformWindowsDefault</span>();</span><br><span class="line">        <span class="built_in">glfwMakeContextCurrent</span>(backup_current_context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Rendering</span></span><br><span class="line">    ImGui::<span class="built_in">Render</span>();</span><br><span class="line">    <span class="built_in">ImGui_ImplOpenGL3_RenderDrawData</span>(ImGui::<span class="built_in">GetDrawData</span>());</span><br><span class="line">    <span class="comment">//---------------------------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看到循环主体内又可以分为三个部分，begin、自定义、end。begin模块包含了每帧开始时，ImGui对于自己窗口和驱动的更新；end模块包含了实际最终的rendering，特别注意在写渲染&#x2F;游戏引擎相关项目时，end中的渲染工作一定要放到最后，因为他本质上也是API的DrawCall(官方解释：<em>a small list of draw calls batches</em>)，对于UI我们总是希望，它是整个窗口的最上层，所以要放到最后渲染(如果放到自定义的渲染之前，好像ImGui内部实现也会报错提醒开发人员)；而自定义事件，一般则是开发人员动态绑定按钮和变量的地方，这里举一个官方的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ImGui::<span class="built_in">Text</span>(<span class="string">&quot;Hello, world %d&quot;</span>, <span class="number">123</span>);</span><br><span class="line"><span class="keyword">if</span> (ImGui::<span class="built_in">Button</span>(<span class="string">&quot;Save&quot;</span>))</span><br><span class="line">    <span class="built_in">MySaveFunction</span>();</span><br><span class="line">ImGui::<span class="built_in">InputText</span>(<span class="string">&quot;string&quot;</span>, buf, <span class="built_in">IM_ARRAYSIZE</span>(buf));</span><br><span class="line">ImGui::<span class="built_in">SliderFloat</span>(<span class="string">&quot;float&quot;</span>, &amp;f, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br></pre></td></tr></table></figure><p><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefined191050833-b7ecf528-bfae-4a9f-ac1b-f3d83437a2f4.png" alt="示例"></p><p>这里可以看到float f变量和string buf变量都被绑定到ImGui的事件中，这使得我们可以在运行时，动态调整这些变量。</p><ul><li>结束</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ImGui_ImplOpenGL3_Shutdown</span>();</span><br><span class="line"><span class="built_in">ImGui_ImplGlfw_Shutdown</span>();</span><br><span class="line">ImGui::<span class="built_in">DestroyContext</span>();</span><br></pre></td></tr></table></figure><h1 id="ImGui-UI概念"><a href="#ImGui-UI概念" class="headerlink" title="ImGui UI概念"></a>ImGui UI概念</h1><ul><li>window(应用内窗口)</li></ul><p>ImGui首先有一个window的概念，并且一个应用(即一个项目)可以包含多个窗口，所以也被称为应用内窗口，窗口时各种控件的载体，而且ImGui已经添加了docking的功能，使得我们可以达到如下结果：</p><p><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefined46304087-00035580-c5ae-11e8-8904-f27a9434574a.gif" alt="20180809_docking"></p><p><img src="https://mi1k-bucket.oss-cn-beijing.aliyuncs.com/undefined97541627-c0dea300-19c5-11eb-9416-8bb255e189a1.png" alt="Docking"></p><ul><li>控件</li></ul><p>可以在window上创建互动类控件，比如按钮、滑动条等等，并且可以将若干控件设置成group，可以完成整齐的布局。</p><ul><li>画布</li></ul><p>可以在window上绘制自定义的形状，也可以绘制图片。（引擎中可以展示相关贴图等，做材质系统）</p><p>这里对于概念只是简单的梳理和介绍，详细可以查询ImGui的wiki：<a href="https://github.com/ocornut/imgui/wiki">https://github.com/ocornut/imgui/wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UI库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
